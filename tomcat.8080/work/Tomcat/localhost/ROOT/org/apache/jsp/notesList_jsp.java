/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-21 20:31:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import java.time.LocalDateTime;
import uk.ac.ucl.model.NoteRecord;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Objects;
import uk.ac.ucl.util.DateFormatter;

public final class notesList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/imports.jsp", Long.valueOf(1742409051280L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("java.util.Objects");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.time.LocalDateTime");
    _jspx_imports_classes.add("uk.ac.ucl.model.NoteRecord");
    _jspx_imports_classes.add("uk.ac.ucl.util.DateFormatter");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"/>\n");
      out.write("  <title>Notes List</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"main\">\n");
      out.write("  <h1>Notes List:</h1>\n");
      out.write("\n");
      out.write("\n");
      out.write("  ");
      out.write("\n");
      out.write("  <form class=\"general-form\" action=\"/notes_list\" method=\"GET\">\n");
      out.write("    <label for=\"sort\">Sort by: </label>\n");
      out.write("    <select name=\"sort\" onchange=\"this.form.submit()\">\n");
      out.write("        ");

            String selectedSort = Objects.requireNonNullElse(request.getParameter("sort"), "mostRecent");

            List<Map.Entry<String, String>> sortLabels = List.of(
                Map.entry("mostRecent", "Newest"),
                Map.entry("leastRecent", "Oldest"),
                Map.entry("alphabetical", "Alphabetical"),
                Map.entry("revAlphabetical", "Reverse Alphabetical")
            );

            for (Map.Entry<String, String> label: sortLabels) {
      out.write("\n");
      out.write("                <option value=\"");
      out.print( label.getKey() );
      out.write('"');
      out.write(' ');
      out.print( label.getKey().equals(selectedSort) ? "selected" : "" );
      out.write('>');
      out.print( label.getValue() );
      out.write("</option>\n");
      out.write("            ");
}
      out.write("\n");
      out.write("\n");
      out.write("            ");
 if (request.getParameter("search") != null && !request.getParameter("search").isEmpty())
            { 
      out.write("\n");
      out.write("                <input type=\"hidden\" name=\"search\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.search}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("            ");
}
      out.write("\n");
      out.write("    </select>\n");
      out.write("  </form>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("  <form class=\"general-form\" action=\"/notes_list\" method=\"GET\">\n");
      out.write("    <label for=\"search\">Search: </label>\n");
      out.write("    <input type=\"text\" name=\"search\" value=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.search}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(">\n");
      out.write("    <input type=\"submit\" value=\"Search\">\n");
      out.write("\n");
      out.write("   ");
 if (request.getParameter("sort") != null && !request.getParameter("sort").isEmpty())
   { 
      out.write("\n");
      out.write("       <input type=\"hidden\" name=\"sort\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.sort}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("   ");
 } 
      out.write("\n");
      out.write("  </form>\n");
      out.write("\n");
      out.write("  ");
      out.write('\n');
      out.write(' ');
      out.write(' ');

    List<Map.Entry<LocalDateTime, NoteRecord>> noteList = (List<Map.Entry<LocalDateTime, NoteRecord>>) request.getAttribute("noteList");
    if (noteList.size() !=0)
    {
      out.write("\n");
      out.write("        <ul>\n");
      out.write("          ");

            for (Map.Entry<LocalDateTime, NoteRecord> entry: noteList)
            {
      out.write("\n");
      out.write("                <li><a href=\"note_view?key=");
      out.print(java.net.URLEncoder.encode(DateFormatter.dateToString(entry.getKey())));
      out.write("\">â€¢ ");
      out.print(entry.getValue().name());
      out.write("</a></li>\n");
      out.write("         ");
}
    }
    else
    {
    
      out.write("\n");
      out.write("      <p>No notes.</p>\n");
      out.write("    ");
}
      out.write("\n");
      out.write("        </ul>\n");
      out.write("  <div class=\"buttons-container\">\n");
      out.write("      <form action=\"note_editor\" method=\"GET\">\n");
      out.write("        <button type=\"submit\" class=\"btn\">Add note</button>\n");
      out.write("      </form>  </div>\n");
      out.write("  <a href=\"/index.html\">Back to Home</a>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
