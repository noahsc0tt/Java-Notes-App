
really should still try to minimally update csv file

start using Objects.requireNonNullElse for parameters

value vs post vs get

restructure model

markdown formatting of text notes as a way to include url, img, etc

better input boxes (size, multiline)
labels instead of just text for textboxes?

rename noteData to notefile or something clearer? notedata vs note vs noterecord is not a good distinction

tidy up logic of noterecord object being passed all the way from noteeditorservlet to savenoteservlet. try and just use key somehow. 


use ${attribute name} syntax in jsps where possible

file structuring: where should noterecord.java etc be stored. any subdirecting?

css

exit with/without saving for add/edit note? confusing label



command behavioural pattern refactoring.guru

make own exceptions with model errors 

make models instance vars rather than declared inside doGet of servlets?




REPORT

talk about quality of code, preventative measures of code smells. splitting up long parameter lists, avoiding god objects.

factory

use design patterns, talk about them. even about what you would implement but not enough time, just to be able to flex that you know about them and their application

implement filter (authentication, presence of parameters)
filterchain chain of responsibility

single responsibility class function. separation of concerns










md:

Yes, you could store note bodies in Markdown format, which would be a great approach for supporting text, images, and URLs in your notes application. Here's why it's a good solution:

### Benefits of using Markdown:

1. **Mixed content support**: Markdown natively supports:
   - Text formatting (bold, italic, headers)
   - Image embedding via `![alt text](image-url)`
   - URL links via `[link text](url)`

2. **Storage simplicity**: You can continue storing notes as text in your existing JSON structure without major architecture changes.

3. **Implementation ease**: You won't need to completely redesign your data model.

### Implementation approach:

1. **Model changes**: 
   - Keep your current `NoteRecord` structure with text-based body field
   - The body would now contain Markdown-formatted text

2. **Editor enhancement**:
   - Add buttons for image upload and URL insertion
   - These would insert proper Markdown syntax into your textarea

3. **Image handling**:
   - Create file upload support in your servlet
   - Store uploaded images in a dedicated directory
   - Insert references like `![Image](uploads/image123.jpg)` into the note body

4. **Rendering**:
   - Add a Markdown processor library (like flexmark-java)
   - Convert Markdown to HTML when displaying notes

This approach minimizes changes to your data model while adding rich content capabilities. The challenge will be handling file uploads and implementing a good editor experience.


If you store note bodies in Markdown format that includes images and URLs, searching through the JSON file for text remains relatively straightforward. Here are the key considerations:

### Searchability of Markdown Content

1. **Plain Text Nature**: Markdown is fundamentally plain text with formatting markers, so all textual content remains searchable.

2. **Separation from Media Content**: 
   - Text content would be directly searchable in the JSON
   - Image references like `![alt text](image-path.jpg)` have minimal impact on text searching
   - URLs like `[link text](https://example.com)` contain searchable link text

3. **Implementation Approaches**:

   - **Simple Text Search**: For basic functionality, you can continue using string operations like `contains()` on the note body:
     ```java
     // Existing search would still work on markdown content
     if (note.body().toLowerCase().contains(searchTerm.toLowerCase())) {
         // Note matches
     }
     ```

   - **Ignoring Markdown Syntax**: You could filter out markdown syntax before searching:
     ```java
     // Strip or ignore markdown patterns when searching
     String plainText = note.body().replaceAll("!\\[.*?\\]\\(.*?\\)|\\[.*?\\]\\(.*?\\)", "$1");
     if (plainText.toLowerCase().contains(searchTerm.toLowerCase())) {
         // Note matches
     }
     ```

   - **Enhanced Search**: Consider indexing content for more advanced search features

### Storage Considerations

The JSON file size will increase with image references, but it would contain only paths to images rather than the images themselves (unless you encode images as Base64 within the markdown, which would significantly increase file size and reduce searchability).

Markdown offers a good balance between rich content support and searchability since the text remains readable and accessible within your JSON structure.